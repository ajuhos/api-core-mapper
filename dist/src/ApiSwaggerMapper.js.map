{"version":3,"file":"ApiSwaggerMapper.js","sourceRoot":"","sources":["../../src/ApiSwaggerMapper.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    Api, ApiEdgeDefinition, ApiEdgeMethod, ApiEdgeRelation, ApiEdgeMethodScope,\n    OneToOneRelation\n} from \"api-core\";\n\nexport class ApiSwaggerMapper {\n\n    levelLimit: number = 2;\n    extendedTags: boolean = true;\n    private api: Api;\n\n    constructor(api: Api) {\n        this.api = api\n    }\n\n    private static provideOperation(target: any,\n                                    path: string,\n                                    tag: string,\n                                    name: string,\n                                    description: string,\n                                    parameterName: string) {\n        if(parameterName) {\n            target[name] = {\n                summary: description,\n                description,\n                tags: [ tag ],\n                parameters: [\n                    {\n                        name: parameterName,\n                        \"in\": \"path\",\n                        required: true\n                    }\n                ],\n                responses: {\n                    \"200\": {\n                        description: \"The requested entry\"\n                    }\n                }\n            };\n\n            if(name == \"get\") {\n                target[name].responses[\"404\"] = {\n                    description: \"Not Found\"\n                }\n            }\n        }\n        else {\n            target[name] = {\n                summary: description,\n                description,\n                tags: [ tag ],\n                responses: {\n                    \"200\": {\n                        description: \"The requested entry\"\n                    }\n                }\n            }\n        }\n\n        if(name == \"post\") {\n            target[name].responses = {\n                \"201\": {\n                    description: \"Created\"\n                }\n            }\n        }\n    }\n\n    private static providePath(target: any,\n                               tag: string,\n                               path: string,\n                               operations: { name: string, description: string, parameter: string }[]) {\n        target[path] = {};\n        operations.forEach((operation: { name: string, description: string, parameter: string }) =>\n            ApiSwaggerMapper.provideOperation(target[path], path, tag,\n                operation.name, operation.description, operation.parameter))\n    }\n\n    private static generateAllOperations(idParam: string = \"\") {\n        const extra = idParam ? \" by id\" : \"\";\n        let output = [\n            { name: \"get\", description: idParam ? \"Get a single entry\" : \"Get a list of entries\", parameter: idParam },\n            { name: \"put\", description: \"Replace an existing entry\" + extra, parameter: idParam },\n            { name: \"patch\", description: \"Modify an existing entry\" + extra, parameter: idParam },\n            { name: \"delete\", description: \"Delete an existing entry\" + extra, parameter: idParam },\n        ];\n        if(!idParam) {\n            output.push({ name: \"post\", description: \"Create a new entry\", parameter: idParam });\n        }\n        return output\n    }\n\n    private static generateGetOperation(idParam: string = \"\") {\n        return [\n            { name: \"get\", description: idParam ? \"Get a single entry\" : \"Get a list of entries\", parameter: idParam }\n        ]\n    }\n\n    private provideRoutesSingular = (target: any, tag: string, edge: ApiEdgeDefinition, prefix = \"\", level = 1) => {\n        if(level > this.levelLimit) return [];\n\n        ApiSwaggerMapper.providePath(target, tag, `${prefix}`, ApiSwaggerMapper.generateAllOperations());\n\n        edge.methods.forEach(\n            (method: ApiEdgeMethod) => {\n                if(method.scope == ApiEdgeMethodScope.Entry || method.scope == ApiEdgeMethodScope.Collection) {\n                    //TODO: Handle acceptedTypes\n                    ApiSwaggerMapper.providePath(target, tag, `${prefix}/${method.name}`,\n                        ApiSwaggerMapper.generateGetOperation())\n                }\n            });\n\n        edge.relations\n            .filter((relation: ApiEdgeRelation) => relation.from == edge)\n            .forEach((relation: ApiEdgeRelation) => {\n                if(relation instanceof OneToOneRelation) {\n                    this.provideRoutesSingular(target,\n                        this.extendedTags ? `${tag}/${relation.name}` : tag,\n                        relation.to,\n                        `${prefix}/${relation.name}`,\n                        level + 1)\n                }\n                else {\n                    this.provideRoutes(target,\n                        this.extendedTags ? `${tag}/${relation.name}` : tag,\n                        relation.to,\n                        `${prefix}/${relation.name}`,\n                        level + 1)\n                }\n            })\n    };\n\n    private provideRoutes = (target: any, tag: string, edge: ApiEdgeDefinition, prefix = \"\", level = 1) => {\n        if(level > this.levelLimit) return [];\n\n        ApiSwaggerMapper.providePath(target, tag, `${prefix}`, ApiSwaggerMapper.generateAllOperations());\n        ApiSwaggerMapper.providePath(target, tag,\n            `${prefix}/{${edge.idField}}`, ApiSwaggerMapper.generateAllOperations(edge.idField));\n\n        edge.methods.forEach(\n            (method: ApiEdgeMethod) => {\n                if(method.scope == ApiEdgeMethodScope.Collection || method.scope == ApiEdgeMethodScope.Edge) {\n                    //TODO: Handle acceptedTypes\n                    ApiSwaggerMapper.providePath(target, tag, `${prefix}/${method.name}`,\n                        ApiSwaggerMapper.generateGetOperation())\n                }\n\n                if(method.scope == ApiEdgeMethodScope.Entry || method.scope == ApiEdgeMethodScope.Edge) {\n                    //TODO: Handle acceptedTypes\n                    ApiSwaggerMapper.providePath(target, tag, `${prefix}/{${edge.idField}}/${method.name}`,\n                        ApiSwaggerMapper.generateGetOperation(edge.idField))\n                }\n            });\n\n        edge.relations\n            .filter((relation: ApiEdgeRelation) => relation.from == edge)\n            .forEach((relation: ApiEdgeRelation) => {\n                if(relation instanceof OneToOneRelation) {\n                    this.provideRoutesSingular(target,\n                        this.extendedTags ? `${tag}/${relation.name}` : tag,\n                        relation.to,\n                        `${prefix}/{${edge.idField}}/${relation.name}`,\n                        level + 1)\n                }\n                else {\n                    this.provideRoutes(target,\n                        this.extendedTags ? `${tag}/${relation.name}` : tag,\n                        relation.to,\n                        `${prefix}/{${edge.idField}}/${relation.name}`,\n                        level + 1)\n                }\n            })\n    };\n\n    private mapEdge = (target: any, edge: ApiEdgeDefinition) => {\n        this.provideRoutes(target, edge.pluralName, edge, `/${edge.pluralName}`)\n    };\n\n/*    private mapDefinition = (edge: ApiEdgeDefinition) => {\n        //TODO\n    };*/\n\n    private mapEdges = () => {\n        let output: any = {};\n        this.api.edges.forEach((edge: ApiEdgeDefinition) => this.mapEdge(output, edge));\n        return output\n    };\n\n    private mapDefinitions = () => {\n        return {}\n    };\n\n    map = () => {\n        return {\n            swagger: \"2.0\",\n            info: {\n                title: \"API\",\n                version: this.api.version\n            },\n            consumes: [\n                \"application/json\"\n            ],\n            produces: [\n                \"application/json\"\n            ],\n            paths: this.mapEdges(),\n            definitions: this.mapDefinitions()\n        }\n    }\n\n}\n"]}